<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <AssemblyName>Architect.Identities</AssemblyName>
    <RootNamespace>Architect.Identities</RootNamespace>
  </PropertyGroup>

  <PropertyGroup>
    <!-- NoWarn: 1573=SummariesOnOnlySomeParams -->
    <!-- NoWarn: 1591=MissingXmlComments -->
    <NoWarn>1573;1591</NoWarn>
    <LangVersion>latest</LangVersion>
    <Nullable>Enable</Nullable>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup>
    <Version>1.0.0-RC1</Version>
    <Description>
Provides various tools related to IDs.

This package features the Fluid ID generator, which generates Flexible, Locally-Unique IDs. A Fluid is intended to replace the combination of auto-increment ID and UUID. It is 64-bit and incremental (i.e. efficient as a primary key) and does not leak the sensitive information that an auto-increment ID does.

The package also provides PublicIdentities, a set of tools for converting local IDs to public IDs. When a Fluid is still considered to leak too much information to be exposed publically, or when using auto-increment IDs, PublicIdentities can help out. This subsystem converts 64-bit (or smaller) IDs into deterministic, reversible public IDs that are indistinguishable from random noise without possession of the configured key. Using the key, public IDs can be converted back to the original IDs. These can replace UUIDs, without the additional bookkeeping.

Furthermore, this package features various ApplicationInstanceIdSource implementations. These implementations provide a unique ID to each distinct application (or instance thereof) within a chosen bounded context, by using a centralized storage component, such as a SQL database or an Azure Blob Storage Container. The Fluid ID generator relies on this feature to ensure that generated IDs are unique.
    </Description>
    <Copyright>The Architect</Copyright>
    <Company>The Architect</Company>
    <Authors>TheArchitectDev, Timovzl</Authors>
    <RepositoryUrl>https://github.com/TheArchitectDev/Architect.Identities</RepositoryUrl>
    <RepositoryType>Git</RepositoryType>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageTags>ID, IDs, identity, identities, UUID, GUID, auto-increment, entity, entities</PackageTags>
    <PackageReleaseNotes>
- Breaking change: Static access is now done through IdGeneratorScope.Current.Generator, using the Ambient Context pattern. It is registered using IdGeneratorExtensions.UseIdGeneratorScope().

- Breaking change: IIdGenerator was optimized for use with Azure, which has several components that do not work with ulong. IIdGenerator.CreateId() now creates a long, CreateSignedId() was removed, and the new CreateUnsignedId() creates a ulong.

- Breaking change: Conversions between Fluids and integral values must now always be done with casts, for consistency. Fluid's public constructors are no longer available, nor is its IntegralValue property.

- Breaking change: Converting from a zero integral value to Fluid is now supported, resulting in the same value as default(Fluid) instead of throwing.

- Upped Azure.Storage.Blobs dependency version, as it fixed an issue related to SAS.
  </PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Architect.AmbientContexts" Version="1.0.0-RC2" />
    <PackageReference Include="Azure.Storage.Blobs" Version="12.3.0" />
    <PackageReference Include="Microsoft.AspNetCore.Http.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="3.1.0" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="3.1.0" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>
