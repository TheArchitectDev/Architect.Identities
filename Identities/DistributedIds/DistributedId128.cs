using System;

// ReSharper disable once CheckNamespace
namespace Architect.Identities
{
	public static class DistributedId128
	{
		// #TODO: Implement like DistributedId

#if NET7_0_OR_GREATER

		/// <summary>
		/// <para>
		/// Splits the given <see cref="DistributedId128"/> value into its upper and lower halves, returned in that order.
		/// The halves are positive <see cref="Int64"/> values.
		/// </para>
		/// <para>
		/// If a value other than one generated by the <see cref="DistributedId128Generator"/> is passed, this method may throw.
		/// It expects the top bit of each half to be unset, to permit the use of two <see cref="Int64"/> values.
		/// </para>
		/// </summary>
		/// <returns>A pair consisting of the most significant 8 bytes first and the least significant 8 bytes last.</returns>
		public static (long, long) Split(this UInt128 id)
		{
			var upper = (long)(id >> 64);
			var lower = (long)id;

			if (upper < 0L || lower < 0L)
				throw new ArgumentException($"A value generated by the {nameof(DistributedId128Generator)} was expected. The top bit of each half must be unset.");

			return (upper, lower);
		}

		/// <summary>
		/// <para>
		/// Reconstitutes a <see cref="DistributedId128"/> value from its upper and lower halves.
		/// </para>
		/// <para>
		/// If the input values together do not represent a value that could be generated by the <see cref="DistributedId128Generator"/>, this method may throw.
		/// It expects the top bit of each half to be unset, i.e. each half being positive.
		/// </para>
		/// </summary>
		/// <param name="upper">The most significant 8 bytes.</param>
		/// <param name="lower">The least significant 8 bytes.</param>
		public static UInt128 Join(long upper, long lower)
		{
			if (upper < 0L || lower < 0L)
				throw new ArgumentException($"A value generated by the {nameof(DistributedId128Generator)} was expected. The top bit of each half must be unset.");

			var result = ((UInt128)upper) << 64;
			result |= (UInt128)lower;
			return result;
		}

#endif
	}
}
